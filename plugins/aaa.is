const axios = require('axios');
const { cmd } = require('../command');
const fs = require('fs');
const stream = require('stream');

cmd({
    pattern: "movie1",
    desc: "Download and send movies via WhatsApp",
    category: "utility",
    react: "‚¨áÔ∏è",
    filename: __filename
},
async (conn, mek, m, { from, reply, args }) => {
    try {
        const query = args.join(' ') || m.text?.replace(/^\.?movie\s?/i, '').trim();
        if (!query) return reply("üîç Please provide a movie name!\nExample: .movie Spider-Man 2021");

        await conn.sendPresenceUpdate('composing', from);

        // API Configuration
        const apiConfig = {
            method: 'GET',
            url: 'https://movie-database-api1.p.rapidapi.com/list_movies.json',
            params: {
                query_term: query,
                limit: 1,
                sort_by: 'download_count'
            },
            headers: {
                'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',
                'x-rapidapi-key': '8f8214432dmshe2d6730ba6b5541p119a35jsna12406472100'
            },
            timeout: 15000
        };

        const apiResponse = await axios(apiConfig);
        
        if (!apiResponse.data?.data?.movies?.length) {
            return reply("‚ùå No movie found - Try different keywords");
        }

        const movie = apiResponse.data.data.movies[0];
        const bestTorrent = movie.torrents.sort((a,b) => 
            parseInt(b.seeds) - parseInt(a.seeds))[0];

        // Download torrent file
        const torrentData = await axios.get(bestTorrent.url, {
            responseType: 'arraybuffer',
            timeout: 30000
        });

        // Create readable stream
        const bufferStream = new stream.PassThrough();
        bufferStream.end(Buffer.from(torrentData.data));

        // Prepare document message
        await conn.sendMessage(from, {
            document: {
                stream: bufferStream,
                filename: `${movie.title.replace(/[^\w]/g, '_')}_${bestTorrent.quality}.torrent`
            },
            caption: `üé• *${movie.title}* (${movie.year})\n` +
                     `üì• ${bestTorrent.quality} | ${bestTorrent.size}\n` +
                     `üë§ Seeds: ${bestTorrent.seeds} | Peers: ${bestTorrent.peers}\n` +
                     `üíæ Total Downloads: ${movie.download_count.toLocaleString()}`,
            mimetype: 'application/x-bittorrent',
            contextInfo: {
                externalAdReply: {
                    title: "Movie Download Bot",
                    body: "Click to get more movies!",
                    mediaType: 2,
                    thumbnail: fs.readFileSync('./assets/thumbnail.jpg'),
                    sourceUrl: "https://example.com"
                }
            }
        }, { quoted: mek });

    } catch (error) {
        console.error('Main Error:', error);
        reply(`‚ö†Ô∏è Error: ${error.response?.data?.message || error.message}`);
    }
});
